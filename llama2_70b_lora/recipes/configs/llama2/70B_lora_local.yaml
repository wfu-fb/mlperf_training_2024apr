# Config for multi-device LoRA finetuning in lora_finetune_distributed.py
# using a Llama2 7B model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download meta-llama/Llama-2-7b-hf --output-dir /tmp/Llama-2-7b-hf --hf-token <HF_TOKEN>
#
# To launch on 2 devices, run the following command from root:
#   tune run --nnodes 1 --nproc_per_node 2 lora_finetune_distributed --config llama2/7B_lora
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run --nnodes 1 --nproc_per_node 2 lora_finetune_distributed --config llama2/7B_lora checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config works best when the model is being fine-tuned on 2+ GPUs.
# For single device LoRA finetuning please use 7B_lora_single_device.yaml
# or 7B_qlora_single_device.yaml


# Model Arguments
model:
  _component_: torchtune.models.llama2.lora_llama2_70b
  lora_attn_modules: ['q_proj', 'v_proj', 'o_proj','k_proj']
    #lora_attn_modules: ['qkv_proj', 'o_proj']
  apply_lora_to_mlp: False
  apply_lora_to_output: False
  lora_rank: 16
  lora_alpha: 32
  lora_dropout: 0.1

tokenizer:
  _component_: torchtune.models.llama2.llama2_tokenizer
    #path: /tmp/Llama-2-7b-hf/tokenizer.model
  path: /home/hiwotkassa/llama2_weight_70b/tokenizer.model
    #path: /mnt/wsfuse/data/gpt3/llama2_weight_70b/tokenizer.model

checkpointer:
  _component_: torchtune.utils.FullModelHFCheckpointer
  checkpoint_dir: /home/hiwotkassa/llama2_weight_70b
    #checkpoint_dir: /mnt/wsfuse/data/gpt3/llama2_weight_70b/
  checkpoint_files: [
    pytorch_model-00001-of-00029.bin,
    pytorch_model-00002-of-00029.bin,
    pytorch_model-00003-of-00029.bin,
    pytorch_model-00004-of-00029.bin,
    pytorch_model-00005-of-00029.bin,
    pytorch_model-00006-of-00029.bin,
    pytorch_model-00007-of-00029.bin,
    pytorch_model-00008-of-00029.bin,
    pytorch_model-00009-of-00029.bin,
    pytorch_model-00010-of-00029.bin,
    pytorch_model-00011-of-00029.bin,
    pytorch_model-00012-of-00029.bin,
    pytorch_model-00013-of-00029.bin,
    pytorch_model-00014-of-00029.bin,
    pytorch_model-00015-of-00029.bin,
    pytorch_model-00016-of-00029.bin,
    pytorch_model-00017-of-00029.bin,
    pytorch_model-00018-of-00029.bin,
    pytorch_model-00019-of-00029.bin,
    pytorch_model-00020-of-00029.bin,
    pytorch_model-00021-of-00029.bin,
    pytorch_model-00022-of-00029.bin,
    pytorch_model-00023-of-00029.bin,
    pytorch_model-00024-of-00029.bin,
    pytorch_model-00025-of-00029.bin,
    pytorch_model-00026-of-00029.bin,
    pytorch_model-00027-of-00029.bin,
    pytorch_model-00028-of-00029.bin,
    pytorch_model-00029-of-00029.bin,
  ]
  adapter_checkpoint: null
  recipe_checkpoint: null
    #output_dir: /home/hiwotkassa/llama2_weight_70b
  output_dir: /tmp/llama2_weight_70b
  model_type: LLAMA2
resume_from_checkpoint: False

# Dataset and Sampler
dataset:
  #_component_: torchtune.datasets.alpaca_cleaned_dataset
  _component_: dataset.instruct_dataset
  train_on_input: True
  max_seq_len: 8192
seed: null
shuffle: True
batch_size: 2

# Optimizer and Scheduler
optimizer:
  _component_: torch.optim.AdamW
  weight_decay: 0.0001
  lr: 4e-4
lr_scheduler:
  _component_: torchtune.modules.get_cosine_schedule_with_warmup
  num_warmup_steps: 0

loss:
  _component_: torch.nn.CrossEntropyLoss

# Training
epochs: 1
max_steps_per_epoch: null
gradient_accumulation_steps: 1

# Logging
output_dir: /tmp/lora_finetune_output
metric_logger:
  _component_: torchtune.utils.metric_logging.DiskLogger
  log_dir: ${output_dir}
log_every_n_steps: null

# Environment
device: cuda
dtype: bf16
enable_activation_checkpointing: True
